Description: Create a CodePipeline to include Nested CloudFormation, CodeBuild and Approval steps.

Parameters:
  AppName:
    Type: String
    Description: App name

Resources:

  CodePipelineCustomPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AppName}-codepipeline-custom-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
                - "s3:GetObject"
                - "s3:GetObjectVersion"
                - "s3:ListBucket"
                - "s3:PutObject"
                - "s3:GetBucketPolicy"
            Resource:
              - "arn:aws:s3:::sample-codebuild-artifacts/*"
              - "arn:aws:s3:::codepipeline-eu-west-1-*"
          -
            Effect: "Allow"
            Action:
                - "ecs:DescribeServices"
                - "ecs:DescribeTaskDefinition"
                - "ecs:DescribeTasks"
                - "ecs:ListTasks"
                - "ecs:RegisterTaskDefinition"
                - "ecs:UpdateService"
            Resource:
              - "*"
          -
            Effect: "Allow"
            Action:
                - "iam:PassRole"
            Resource:
              - "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService: "ecs-tasks.amazonaws.com"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: ${AppName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineApproverAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - !Ref CodePipelineCustomPolicy

  CodeBuildCustomPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AppName}-codebuild-custom-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - logs:*
            Resource:
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/codebuild/stage:*
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/codebuild/stage
          -
            Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
            Resource:
              - "arn:aws:s3:::sample-codebuild-artifacts/*"

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: ${AppName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - !Ref CodeBuildCustomPolicy


Outputs:

    CodePipelineRoleArn:
      Value: { "Fn::GetAtt": CodePipelineRole.Arn }
      Export:
        Name: !Sub "${AppName}:CodePipelineRole"

    CodeBuildRoleArn:
      Value: { "Fn::GetAtt": CodeBuildRole.Arn }
      Export:
        Name: !Sub "${AppName}:CodeBuildRole"
